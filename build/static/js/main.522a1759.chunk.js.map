{"version":3,"sources":["components/Buscador.js","components/Imagen.js","components/Resultado.js","App.js","serviceWorker.js","index.js"],"names":["Buscador","busquedaRef","React","createRef","obtenerDatos","e","preventDefault","termino","current","value","props","datosBusqueda","onSubmit","this","ref","type","className","placeholder","Component","Imagen","imagen","largeImageURL","likes","imageWidth","imageHeight","views","width","sum","console","log","style","backgroundImage","href","target","rel","fontWeight","Resultado","mostrarImagenes","imagenes","length","Fragment","map","key","id","App","state","consultarApi","url","fetch","then","respuesta","json","resultado","setState","hits","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sNA6BeA,G,kNAxBXC,YAAcC,IAAMC,Y,EAEpBC,aAAe,SAACC,GACZA,EAAEC,iBAEF,IAAMC,EAAU,EAAKN,YAAYO,QAAQC,MAEzC,EAAKC,MAAMC,cAAcJ,I,uDAIzB,OACI,0BAAMK,SAAUC,KAAKT,cACjB,6BACI,2BAAOU,IAAKD,KAAKZ,YAAac,KAAK,OAAOC,UAAW,QAAQC,YAAY,wBAE7E,6BACI,2BAAOF,KAAK,SAASC,UAAW,SAASP,MAAM,iB,GAnB5CS,cC+BRC,EAhCA,SAACT,GAAW,IAAD,EAEyCA,EAAMU,OAA9DC,EAFe,EAEfA,cAAeC,EAFA,EAEAA,MAAOC,EAFP,EAEOA,WAAYC,EAFnB,EAEmBA,YAAaC,EAFhC,EAEgCA,MAClDC,EAAYH,EAAWC,EAAf,GACRG,EAAM,EAIV,OAHAA,GAAUD,EACVE,QAAQC,IAAIF,GAGR,yBAAKX,UAAU,QACXc,MAAO,CACHC,gBAAgB,OAAD,OAAQV,EAAR,KACfK,MAAM,GAAD,OAAKA,EAAL,QAET,yBAAKV,UAAU,WACX,8BAAM,qCAAN,IAAqBM,EAArB,MAAoC,6BACpC,8BAAM,qCAAN,IAAqBG,EAArB,MAAoC,6BAEpC,uBACIO,KAAMX,EACNY,OAAO,SACPC,IAAI,sBACJJ,MAAO,CACHK,WAAY,SALpB,iBCeDC,E,4MA9BXC,gBAAkB,WAEd,IAAMC,EAAW,EAAK5B,MAAM4B,SAE5B,OAAuB,IAApBA,EAASC,OAAqB,KAG7B,kBAAC,IAAMC,SAAP,KACI,yBAAKxB,UAAY,UACZsB,EAASG,KAAI,SAAArB,GAAM,OAChB,kBAAC,EAAD,CACIA,OAAQA,EACRsB,IAAOtB,EAAOuB,W,uDAUlC,OACI,kBAAC,IAAMH,SAAP,KACK3B,KAAKwB,uB,GA1BEnB,aC0CT0B,E,4MAtCbC,MAAQ,CACNtC,QAAS,GACT+B,SAAU,I,EAGZQ,aAAe,WACb,IAAMC,EAAG,4EAAwE,EAAKF,MAAMtC,SAE5FyC,MAAMD,GACHE,MAAK,SAAAC,GAAS,OAAIA,EAAUC,UAC5BF,MAAK,SAAAG,GAAS,OAAI,EAAKC,SAAS,CAACf,SAAWc,EAAUE,W,EAG3D3C,cAAgB,SAACJ,GACf,EAAK8C,SAAS,CACZ9C,YACC,WACD,EAAKuC,mB,uDAKP,OACE,yBAAK9B,UAAU,OACb,yBAAKA,UAAU,YACb,uDACA,kBAAC,EAAD,CACEL,cAAeE,KAAKF,iBAGxB,kBAAC,EAAD,CACE2B,SAAYzB,KAAKgC,MAAMP,gB,GAjCfpB,aCOEqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,a","file":"static/js/main.522a1759.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nclass Buscador extends Component {\r\n\r\n    busquedaRef = React.createRef();\r\n\r\n    obtenerDatos = (e) => {\r\n        e.preventDefault();\r\n\r\n        const termino = this.busquedaRef.current.value;\r\n\r\n        this.props.datosBusqueda(termino);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.obtenerDatos} >\r\n                <div>\r\n                    <input ref={this.busquedaRef} type=\"text\" className =\"input\" placeholder=\"Busca tu imagen...\" />\r\n                </div>\r\n                <div>\r\n                    <input type=\"submit\" className =\"button\" value=\"Buscar\"/>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Buscador;","import React from 'react';\r\n\r\nconst Imagen = (props) => {\r\n\r\n    const {largeImageURL, likes, imageWidth, imageHeight, views} = props.imagen;\r\n    var width = 14*(imageWidth/imageHeight);\r\n    var sum = 0;\r\n    sum = sum+width;\r\n    console.log(sum);\r\n\r\n    return (\r\n        <div className=\"image\" \r\n            style={{\r\n                backgroundImage:`url(${largeImageURL})`,\r\n                width: `${width}vw`\r\n            }}>\r\n            <div className=\"content\">\r\n                <span><b>Likes:</b> {likes}  </span><br/>\r\n                <span><b>Views:</b> {views}  </span><br/>\r\n                \r\n                <a \r\n                    href={largeImageURL} \r\n                    target=\"_blank\" \r\n                    rel=\"noopener noreferrer\"\r\n                    style={{ \r\n                        fontWeight: 'bold'\r\n                    }}>\r\n                    Large size</a>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Imagen;","import React, { Component } from 'react';\r\nimport Imagen from './Imagen.js';\r\n\r\nclass Resultado extends Component {\r\n\r\n    mostrarImagenes = () => {\r\n\r\n        const imagenes = this.props.imagenes;\r\n\r\n        if(imagenes.length === 0) return null;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <div className = \"holder\">\r\n                    {imagenes.map(imagen =>(\r\n                        <Imagen \r\n                            imagen={imagen}\r\n                            key = {imagen.id}\r\n                        />\r\n                    ))}\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n\r\n    render () {\r\n        return (\r\n            <React.Fragment>\r\n                {this.mostrarImagenes()}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Resultado;","import React, { Component } from 'react';\nimport './App.css';\nimport Buscador from './components/Buscador.js';\nimport Resultado from './components/Resultado.js';\n\nclass App extends Component{\n\n  state = {\n    termino: \"\",\n    imagenes: []\n  }\n  \n  consultarApi = () => {\n    const url = `https://pixabay.com/api/?key=17903545-f909876c376874eb3ff689de1&q=${this.state.termino}`;\n\n    fetch(url)\n      .then(respuesta => respuesta.json())\n      .then(resultado => this.setState({imagenes : resultado.hits}));\n  }\n\n  datosBusqueda = (termino) => {\n    this.setState({\n      termino\n    }, () => {\n      this.consultarApi();\n    })\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <div className=\"buscador\">\n          <h1>Buscador de Im√°genes</h1>\n          <Buscador \n            datosBusqueda={this.datosBusqueda}\n          />\n        </div>\n        <Resultado \n          imagenes = {this.state.imagenes}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}